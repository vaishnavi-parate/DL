import pandas as pd
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, Flatten, Dense
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
%matplotlib inline


df = pd.read_csv("IMDB Dataset.csv")
df


df['sentiment'] = df['sentiment'].map({'positive': 1, 'negative': 0})


texts = df['review'].values
labels = df['sentiment'].astype(int).values


num_words = 10000  # use top 10,000 words
tokenizer = Tokenizer(num_words=num_words)
tokenizer.fit_on_texts(texts)
sequences = tokenizer.texts_to_sequences(texts)


maxlen = 500
data = pad_sequences(sequences, maxlen=maxlen)



x_train, x_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)



model = Sequential([
    Embedding(input_dim=num_words, output_dim=32, input_length=maxlen),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(1, activation='sigmoid')
])


model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])


history=model.fit(x_train, y_train, epochs=5, batch_size=64, validation_split=0.2)


plt.plot(history.history['accuracy'],label='Train')
plt.plot(history.history['val_accuracy'],label='Validation')
plt.legend(),plt.title('Accuracy'),plt.xlabel('Epoch'),plt.ylabel('Accuracy')
plt.show()


plt.plot(history.history['loss'],label='Train')
plt.plot(history.history['val_loss'],label='Validation')
plt.legend(),plt.title('Loss'),plt.xlabel('Epoch'),plt.ylabel('Loss')
plt.show()


loss, accuracy = model.evaluate(x_test, y_test)
print(f"Test Accuracy: {accuracy:.2f}")
